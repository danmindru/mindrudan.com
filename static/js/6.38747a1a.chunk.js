(this["webpackJsonpmindrudan.com"]=this["webpackJsonpmindrudan.com"]||[]).push([[6],{250:function(n,e,t){"use strict";t.r(e),t.d(e,"php",(function(){return r}));var i=t(2),s=t(4);function o(){var n=Object(i.a)(["\n<?php\n$secrets = file_get_contents(\"./.secrets.txt\"); /* TODO improve security */\n$s = explode(\"\n\", $secrets);\n\n// ** Database settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', 'dan' );\n\n/** Database username */\ndefine( 'DB_USER', $s[1] );\n\n/** Database password */\ndefine( 'DB_PASSWORD', $s[0] );\n\n/** Database hostname */\ndefine( 'DB_HOST', '172.217.3.174' ); /* TODO do not hardcode */\n\n/** Database charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The database collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\n/**\n * Bootstrap file for setting the ABSPATH constant\n * and loading the wp-config.php file. The wp-config.php\n * file will then load the wp-settings.php file, which\n * will then set up the WordPress environment.\n *\n * If the wp-config.php file is not found then an error\n * will be displayed asking the visitor to set up the\n * wp-config.php file.\n *\n * Will also search for wp-config.php in WordPress' parent\n * directory to allow the WordPress directory to remain\n * untouched.\n *\n * @package WordPress\n */\n\n/** Define ABSPATH as this file's directory */\nif ( ! defined( 'ABSPATH' ) ) {\n\tdefine( 'ABSPATH', __DIR__ . '/' );\n}\n\n/*\n * The error_reporting() function can be disabled in php.ini. On systems where that is the case,\n * it's best to add a dummy function to the wp-config.php file, but as this call to the function\n * is run prior to wp-config.php loading, it is wrapped in a function_exists() check.\n */\nif ( function_exists( 'error_reporting' ) ) {\n\t/*\n\t * Initialize error reporting to a known set of levels.\n\t *\n\t * This will be adapted in wp_debug_mode() located in wp-includes/load.php based on WP_DEBUG.\n\t * @see https://www.php.net/manual/en/errorfunc.constants.php List of known error levels.\n\t */\n\terror_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR );\n}\n\n/*\n * If wp-config.php exists in the WordPress root, or if it exists in the root and wp-settings.php\n * doesn't, load wp-config.php. The secondary check for wp-settings.php has the added benefit\n * of avoiding cases where the current directory is a nested installation, e.g. / is WordPress(a)\n * and /blog/ is WordPress(b).\n *\n * If neither set of conditions is true, initiate loading the setup process.\n */\nif ( file_exists( ABSPATH . 'wp-config.php' ) ) {\n\n\t/** The config file resides in ABSPATH */\n\trequire_once ABSPATH . 'wp-config.php';\n\n} elseif ( @file_exists( dirname( ABSPATH ) . '/wp-config.php' ) && ! @file_exists( dirname( ABSPATH ) . '/wp-settings.php' ) ) {\n\n\t/** The config file resides one level above ABSPATH but is not part of another installation */\n\trequire_once dirname( ABSPATH ) . '/wp-config.php';\n\n} else {\n\n\t// A config file doesn't exist.\n\n\tdefine( 'WPINC', 'wp-includes' );\n\trequire_once ABSPATH . WPINC . '/load.php';\n\n\t// Standardize $_SERVER variables across setups.\n\twp_fix_server_vars();\n\n\trequire_once ABSPATH . WPINC . '/functions.php';\n\n\t$path = wp_guess_url() . '/wp-admin/setup-config.php';\n\n\t// Redirect to setup-config.php.\n\tif ( false === strpos( $_SERVER['REQUEST_URI'], 'setup-config' ) ) {\n\t\theader( 'Location: ' . $path );\n\t\texit;\n\t}\n\n\tdefine( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' );\n\trequire_once ABSPATH . WPINC . '/version.php';\n\n\twp_check_php_mysql_versions();\n\twp_load_translations_early();\n\n\t// Die with an error message.\n\t$die = '<p>' . sprintf(\n\t\t/* translators: %s: wp-config.php */\n\t\t__( \"There doesn't seem to be a %s file. It is needed before the installation can continue.\" ),\n\t\t'<code>wp-config.php</code>'\n\t) . '</p>';\n\t$die .= '<p>' . sprintf(\n\t\t/* translators: 1: Documentation URL, 2: wp-config.php */\n\t\t__( 'Need more help? <a href=\"%1$s\">Read the support article on %2$s</a>.' ),\n\t\t__( 'https://wordpress.org/documentation/article/editing-wp-config-php/' ),\n\t\t'<code>wp-config.php</code>'\n\t) . '</p>';\n\t$die .= '<p>' . sprintf(\n\t\t/* translators: %s: wp-config.php */\n\t\t__( \"You can create a %s file through a web interface, but this doesn't work for all server setups. The safest way is to manually create the file.\" ),\n\t\t'<code>wp-config.php</code>'\n\t) . '</p>';\n\t$die .= '<p><a href=\"' . $path . '\" class=\"button button-large\">' . __( 'Create a Configuration File' ) . '</a></p>';\n\n\twp_die( $die, __( 'WordPress &rsaquo; Error' ) );\n}\n"],["\n<?php\n$secrets = file_get_contents(\"./.secrets.txt\"); /* TODO improve security */\n$s = explode(\"\\n\", $secrets);\n\n// ** Database settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', 'dan' );\n\n/** Database username */\ndefine( 'DB_USER', $s[1] );\n\n/** Database password */\ndefine( 'DB_PASSWORD', $s[0] );\n\n/** Database hostname */\ndefine( 'DB_HOST', '172.217.3.174' ); /* TODO do not hardcode */\n\n/** Database charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8' );\n\n/** The database collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\n/**\n * Bootstrap file for setting the ABSPATH constant\n * and loading the wp-config.php file. The wp-config.php\n * file will then load the wp-settings.php file, which\n * will then set up the WordPress environment.\n *\n * If the wp-config.php file is not found then an error\n * will be displayed asking the visitor to set up the\n * wp-config.php file.\n *\n * Will also search for wp-config.php in WordPress' parent\n * directory to allow the WordPress directory to remain\n * untouched.\n *\n * @package WordPress\n */\n\n/** Define ABSPATH as this file's directory */\nif ( ! defined( 'ABSPATH' ) ) {\n\tdefine( 'ABSPATH', __DIR__ . '/' );\n}\n\n/*\n * The error_reporting() function can be disabled in php.ini. On systems where that is the case,\n * it's best to add a dummy function to the wp-config.php file, but as this call to the function\n * is run prior to wp-config.php loading, it is wrapped in a function_exists() check.\n */\nif ( function_exists( 'error_reporting' ) ) {\n\t/*\n\t * Initialize error reporting to a known set of levels.\n\t *\n\t * This will be adapted in wp_debug_mode() located in wp-includes/load.php based on WP_DEBUG.\n\t * @see https://www.php.net/manual/en/errorfunc.constants.php List of known error levels.\n\t */\n\terror_reporting( E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_ERROR | E_WARNING | E_PARSE | E_USER_ERROR | E_USER_WARNING | E_RECOVERABLE_ERROR );\n}\n\n/*\n * If wp-config.php exists in the WordPress root, or if it exists in the root and wp-settings.php\n * doesn't, load wp-config.php. The secondary check for wp-settings.php has the added benefit\n * of avoiding cases where the current directory is a nested installation, e.g. / is WordPress(a)\n * and /blog/ is WordPress(b).\n *\n * If neither set of conditions is true, initiate loading the setup process.\n */\nif ( file_exists( ABSPATH . 'wp-config.php' ) ) {\n\n\t/** The config file resides in ABSPATH */\n\trequire_once ABSPATH . 'wp-config.php';\n\n} elseif ( @file_exists( dirname( ABSPATH ) . '/wp-config.php' ) && ! @file_exists( dirname( ABSPATH ) . '/wp-settings.php' ) ) {\n\n\t/** The config file resides one level above ABSPATH but is not part of another installation */\n\trequire_once dirname( ABSPATH ) . '/wp-config.php';\n\n} else {\n\n\t// A config file doesn't exist.\n\n\tdefine( 'WPINC', 'wp-includes' );\n\trequire_once ABSPATH . WPINC . '/load.php';\n\n\t// Standardize $_SERVER variables across setups.\n\twp_fix_server_vars();\n\n\trequire_once ABSPATH . WPINC . '/functions.php';\n\n\t$path = wp_guess_url() . '/wp-admin/setup-config.php';\n\n\t// Redirect to setup-config.php.\n\tif ( false === strpos( $_SERVER['REQUEST_URI'], 'setup-config' ) ) {\n\t\theader( 'Location: ' . $path );\n\t\texit;\n\t}\n\n\tdefine( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' );\n\trequire_once ABSPATH . WPINC . '/version.php';\n\n\twp_check_php_mysql_versions();\n\twp_load_translations_early();\n\n\t// Die with an error message.\n\t$die = '<p>' . sprintf(\n\t\t/* translators: %s: wp-config.php */\n\t\t__( \"There doesn't seem to be a %s file. It is needed before the installation can continue.\" ),\n\t\t'<code>wp-config.php</code>'\n\t) . '</p>';\n\t$die .= '<p>' . sprintf(\n\t\t/* translators: 1: Documentation URL, 2: wp-config.php */\n\t\t__( 'Need more help? <a href=\"%1$s\">Read the support article on %2$s</a>.' ),\n\t\t__( 'https://wordpress.org/documentation/article/editing-wp-config-php/' ),\n\t\t'<code>wp-config.php</code>'\n\t) . '</p>';\n\t$die .= '<p>' . sprintf(\n\t\t/* translators: %s: wp-config.php */\n\t\t__( \"You can create a %s file through a web interface, but this doesn't work for all server setups. The safest way is to manually create the file.\" ),\n\t\t'<code>wp-config.php</code>'\n\t) . '</p>';\n\t$die .= '<p><a href=\"' . $path . '\" class=\"button button-large\">' . __( 'Create a Configuration File' ) . '</a></p>';\n\n\twp_die( $die, __( 'WordPress &rsaquo; Error' ) );\n}\n"]);return o=function(){return n},n}var r=Object(s.a)(o())}}]);
//# sourceMappingURL=6.38747a1a.chunk.js.map